1、分割子图   plt.subplot(numRows, numCols, plotNum)
    # 分割出 3*2=6 个子图，并在1号子图作图。
        plt.subplot(321)
    # 分割成第一行两个图，第二行一整个图
        plt.subplot(221) # 第一行的左图
        plt.subplot(222) # 第一行的右图
        plt.subplot(212) # 第二整行


    共享坐标轴：
    # sharey： 与 ax1 共享一个 y轴范围
    ax2 = plt.subplot(1, 2, 2, sharey=ax1)

    fig, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, sharex=True, sharey=True)
    ax5.plot(exponential_data, '-')



2、横纵坐标
    plt.xlim([0,10]) # x轴刻度范围
    plt.ylim([0,10]) # y轴刻度范围
     
    
    获取当前坐标：
	ax = plt.gca()
    设置坐标轴范围
	ax.axis([0, 6, 0, 10])

    获取每一个横坐标值：
    x = plt.gca().xaxis
        for item in x.get_ticklabels():

    plt.xlabel('X', fontsize=15)    # 横轴标记
    plt.ylabel('Y', fontsize=15)    # 纵轴标记
	

    横轴字体角度：
    # plt.xticks(rotation='45')
    
    # 对于学术制图，可在标题中包含latex语法
    ax = plt.gca()
    ax.set_title('Quadratic ($x^2$) vs. Linear ($x$)')


3、控制画布大小背景
    plt.figure(facecolor='w')                     # 控制背景颜色
    plt.figure(figsize=(3, 3))                      # 控制窗口大小
    plt.grid(True)                                  #显示网格
    plt.title(u'正态分布', fontsize=18, fontproperties=font_ch)



4、 图例
    # 指定label后才有图例 Legend
    plt.scatter(x[2:], y[2:], c='blue', label='samples 2')

    # 4: 右下角   frameon 边框       loc也可以赋值为 'best'
    plt.legend(loc=4, frameon=True, title='Legend')
    
    plt.legend(['legend1', 'legend2', 'legend3'])


5、散点图
    plt.scatter(x,y,c=T,s=25,alpha=0.4,marker='o')
        #T:散点的颜色
        #s：散点的大小
        #alpha:是透明程度
        #marker：散点的形状


6、直方图
    # x坐标分为30份
    plt.hist(x, 30, color='m', alpha=0.5, label=u'uniform distribution')   

    plt.hist(x, bins=15, normed=True, range=[0, 15], color='g', alpha=0.5) 
	#bins表示数据的宽度，range表示起始值和终止值
        # 默认bin的个数为10    也可以指定为边界（如：【10，20，30】）
    	# normed 是否对y轴数据进行标准化(如果为True，则是在本区间的点在所有的点中所占的概率)  如果 normed 为False， 则是显示点的数量
    

        # 使用gridspec和直方图绘制一个复杂分析图
        import matplotlib.gridspec as gridspec

        # 10000个数的随机分布
        x = np.random.random(size=10000)
        # [0,1]的正态分布
        y = np.random.normal(loc=0., scale=1., size=10000)

        plt.figure()
        gspec = gridspec.GridSpec(3, 3)

        top_hist = plt.subplot(gspec[0, 1:])
        side_hist = plt.subplot(gspec[1:, 0])
        lower_right = plt.subplot(gspec[1:, 1:])

        lower_right.scatter(x, y)
        top_hist.hist(x, bins=100, normed=True)
        # 指定竖直方向：orientation='horizontal'
        side_hist.hist(y, bins=100, orientation='horizontal', normed=True)
        # 反转 x轴
        side_hist.invert_xaxis()


7、折线图
    plt.figure()
   # 线性图不需要指定x，默认使用索引号。
   # 注意，这里我们只指定了y轴数据，x轴的数据是matplotlib自动生成的
   plt.plot(linear_data, '-o', quadratic_data, '-o')
   
   
   # 借助pandas绘制横轴为时间的线图
	import pandas as pd
	plt.figure()
	observation_dates = np.arange('2017-10-11', '2017-10-19', dtype='datetime64[D]')
	# map(函数，数据)
	observation_dates = list(map(pd.to_datetime, observation_dates))
	plt.plot(observation_dates, linear_data, '-o',
        observation_dates, quadratic_data, '-o')






8、柱状图
    linear_data = np.arange(1, 9)
    quadratic_data = linear_data ** 2

    plt.figure()
    x_vals = list(range(len(linear_data)))
    plt.bar(x_vals, linear_data, width=0.3)

    # group bar chart   分组柱状图
    # 同一副图中添加新的柱状图
    # 注意，为了不覆盖第一个柱状图，需要对x轴做偏移
    x_vals2 = [item + 0.3 for item in x_vals]
    plt.bar(x_vals2, quadratic_data, width=0.3)
    
    # stack bar chart    堆叠柱状图
    plt.figure()
    x_vals = list(range(len(linear_data)))
    plt.bar(x_vals, linear_data, width=0.3)
    # bottem 为了不让数据重叠  需要在数据上加上第一个数据高度
    plt.bar(x_vals, quadratic_data, width=0.3, bottom=linear_data)


    # 横向柱状图    barh
    plt.figure()
    x_vals = list(range(len(linear_data)))
    plt.barh(x_vals, linear_data, height=0.3) 
    # 堆叠横向柱状图在左边加 bottom
    plt.barh(x_vals, quadratic_data, height=0.3, left=linear_data)



9、盒形图
    plt.figure()
    # whis： 不启用离群值    # 不用whis  就是启用离群值
    plt.boxplot([df['normal'], df['random'], df['gamma']], whis='range')


10、把图像保存为文件
    plt.savefig('test.png')







 




### color
b---blue   c---cyan  g---green    k----black
m---magenta r---red  w---white    y----yellow

### marker
# marker	description
    # ”.”	point
    # ”,”	pixel
    # “o”	circle
    # “v”	triangle_down
    # “^”	triangle_up
    # “<”	triangle_left
    # “>”	triangle_right
    # “1”	tri_down
    # “2”	tri_up
    # “3”	tri_left
    # “4”	tri_right
    # “8”	octagon
    # “s”	square
    # “p”	pentagon
    # “*”	star
    # “h”	hexagon1
    # “H”	hexagon2
    # “+”	plus
    # “x”	x
    # “D”	diamond
    # “d”	thin_diamond
    # “|”	vline
    # “_”	hline
    # TICKLEFT	tickleft
    # TICKRIGHT	tickright
    # TICKUP	tickup
    # TICKDOWN	tickdown
    # CARETLEFT	caretleft
    # CARETRIGHT	caretright
    # CARETUP	caretup
    # CARETDOWN	caretdown




随机数生成：
     正态分布采样
    normal_sample = np.random.normal(loc=0., scale=1., size=10000)

     随机数采样
    random_sample = np.random.random(size=10000)

     gamma分布采样
    gamma_sample = np.random.gamma(2, size=10000)


    np.random.seed(5)  保证每次随机出来的数都是相同的
    numpy.random.randn(d0, d1, …, dn)是从标准正态分布中返回一个或多个样本值。
    numpy.random.rand(d0, d1, …, dn)的随机样本位于[0, 1)中。